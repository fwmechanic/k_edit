#!lua
--
-- Copyright 2015-2019 by Kevin L. Goodwin [fwmechanic@gmail.com]; All rights reserved
--
-- This file is part of K.
--
-- K is free software: you can redistribute it and/or modify it under the
-- terms of the GNU General Public License as published by the Free Software
-- Foundation, either version 3 of the License, or (at your option) any later
-- version.
--
-- K is distributed in the hope that it will be useful, but WITHOUT ANY
-- WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
-- FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
-- details.
--
-- You should have received a copy of the GNU General Public License along
-- with K.  If not, see <http://www.gnu.org/licenses/>.
--

--[[

20070823 kgoodwin wrote

20080618 kgoodwin NB!  K (editor core) directly accesses the contents of
                  this file's global ftype_map (see display.cpp)

20190208 kgoodwin FnmToFType, ShebangToFType

--]]

-- print "hello 1"

do
   --------------------------------------------------------------
   local shebangToFType_ = {
      node    = "clang",
      perl6   = "perl",
      python2 = "python",
      python3 = "python",
      uv      = "python",
      }
   function ShebangToFType( shebang )  -- called from C++ !!!  DO NOT RENAME!!!  CHANGE WITH CAUTION!
      return shebangToFType_[shebang] or shebang
      end
   --------------------------------------------------------------
   local nxToFType_ = { -- keep sorted by value (FType)
      ["CMakeLists.txt"] = "cmake"     ,
      ["k.luaedit"     ] = "lua"       ,
      ["makefile"      ] = "make"      ,
      ["GNUmakefile"   ] = "make"      ,
      ["Makefile"      ] = "make"      ,
      }
   local nxToFType_patterns = { -- keep sorted by value (FType)
      -- startsWith
      ["^\.bash"        ] = "bash"    ,
      ["^Dockerfile"    ] = "bash"    ,  -- https://stackoverflow.com/questions/26077543/how-to-name-dockerfiles
      ["^SConstruct"    ] = "python"  ,  -- https://scons.org/doc/production/HTML/scons-man.html
      ["^SConscript"    ] = "python"  ,  -- https://scons.org/doc/production/HTML/scons-man.html
      -- endsWith
      ["makefile$"      ] = "make"    ,
      ["Makefile$"      ] = "make"    ,
      }
   local exToFType_ = { -- keep sorted by value (FType)
      asm         = "asm"         ,
      inc         = "asm"         ,
      s           = "asm"         ,
      twk         = "awk"         ,
      gawk        = "awk"         ,
      kxt         = "awk"         ,
      awk         = "awk"         ,
      kxl         = "awk"         ,
      twl         = "awk"         ,
      csh         = "bash"        ,
      tcsh        = "bash"        ,
      bash        = "bash"        ,
      fish        = "bash"        ,
      sh          = "bash"        ,
      zsh         = "bash"        ,
      ksh         = "bash"        ,
      hxx         = "clang"       ,
      kh          = "clang"       ,
      h           = "clang"       ,
      kc          = "clang"       ,
      hpp         = "clang"       ,
      cxx         = "clang"       ,
      cs          = "clang"       ,
      go          = "clang"       ,  -- odd as it seems, this works pretty well
      groovy      = "clang"       ,  -- odd as it seems, this works pretty well; even for """triple double quoted strings"""!
      java        = "clang"       ,  -- odd as it seems, this works pretty well
      json        = "clang"       ,  -- odd as it seems, this works pretty well
      painless    = "clang"       ,  -- odd as it seems, this works pretty well (groovy-like elastisearch-only scripting language)
      m           = "clang"       ,
      cpp         = "clang"       ,
      cc          = "clang"       ,
      c           = "clang"       ,
      go          = "clang"       ,
      js          = "clang"       ,
      ts          = "clang"       ,
      vue         = "clang"       ,
      cmake       = "cmake"       ,
      diff        = "diff"        ,
      expect      = "expect"      ,
      tcl         = "expect"      ,
      kdb         = "kdb"         ,
      krsrc       = "krsrc"       ,
      log         = "log"         ,
      lua         = "lua"         ,
      mak         = "make"        ,
      conf        = "make"        ,
      mik         = "make"        ,
      mak         = "make"        ,
      make        = "make"        ,
      md          = "markdown"    ,
      mod         = "modula2"     ,
      def         = "modula2"     ,
      cmd         = "msbatch"     ,
      bat         = "msbatch"     ,
      pas         = "pascal"      ,
      dpr         = "pascal"      ,
      pl          = "perl"        ,
      pm          = "perl"        ,
      perl        = "perl"        ,
      ps1         = "pwrshell"    ,  -- https://stackoverflow.com/a/12108746
      psm1        = "pwrshell"    ,  -- https://stackoverflow.com/a/12108746
      psd1        = "pwrshell"    ,  -- https://stackoverflow.com/a/12108746
      python      = "python"      ,
      python3     = "python"      ,
      py          = "python"      ,
      spa         = "sprintascii" ,
      psql        = "sql"         ,
      sql         = "sql"         ,
      xml         = "xml"         ,
      html        = "xml"         ,
      htm         = "xml"         ,
      dtd         = "xml"         ,
      tex         = "tex"         ,
      }
   function FnmToFType( nx )  -- called from C++ !!!  DO NOT RENAME!!!  CHANGE WITH CAUTION!
                                     -- printf( "k.f.FnmToFType(%s)", nx or "(nil)" )
      if nx and nxToFType_[nx] then
         local rv = nxToFType_[nx]   -- printf( "k.f.FnmToFType(%s) => %s", nx, rv )
         return rv
         end
      for pat,rv in pairs( nxToFType_patterns ) do -- printf( "k.f.FnmToFType(%s) nx.pat=%s", nx, pat )
         if string.match( nx, pat ) then           -- printf( "k.f.FnmToFType(%s) nx.pat=%s => %s", nx, pat, rv )
            return rv
            end
         end
      local ex = ExtOf( nx )         -- printf( "k.f.FnmToFType(%s) ex=%s", nx, ex or "(nil)" )
      if ex and exToFType_[ex] then
         local rv = exToFType_[ex]   -- printf( "k.f.FnmToFType(%s) ex=%s => %s", nx, ex, rv )
         return rv
         end
      -- local nm = NameOf( nx )  printf( "k.f.FnmToFType(%s) -> %s,%s", nx,nm,ex )
      return
      end

end


 printf( "%s", string.match( 'foobar', "foo" ) )
--printf( "%s", ExtOf( "nx.ex" ) )

local function bfg(bg,fg) return bg*16 + fg end

local function proto( base, tb )
   setmetatable( tb, { __index = base } )
   return tb
   end

local Black    = 0
local Blue     = 1
local Green    = 2
local Cyan     = 3
local Red      = 4
local Purple   = 5
local Yellow   = 6
local White    = 7
local            INTENSE = 8
local Gray     = INTENSE + Black
local hiBlue   = INTENSE + Blue
local hiGreen  = INTENSE + Green
local hiCyan   = INTENSE + Cyan
local hiRed    = INTENSE + Red
local hiPink   = INTENSE + Purple
local hiYellow = INTENSE + Yellow
local hiWhite  = INTENSE + White

-- hack: on the Windows PC's I use, non-INTENSE colors (EX: Green) tend to be too dark, -> barely visible
local intifwin = OsName()=="win32" and function( color ) return INTENSE + (color % INTENSE) end or function( color ) return color end

local stdColors = {
   txt = bfg(   Blue   , hiYellow ),
   cxy = bfg(   Purple , hiYellow ),
   cxy = bfg(   Cyan   , hiYellow ),
   cpp = bfg(   Gray   , hiWhite  ),
   hil = bfg(   Cyan   , hiWhite  ),
   sel = bfg(   Green  , hiWhite  ),
   wuc = bfg( hiWhite  ,   Cyan   ),
   com = bfg(   Blue   , hiGreen  ),
   str = bfg(   Blue   , hiPink   ),
   str = bfg(   Green  , hiCyan   ),
   str = bfg(   Black  , hiRed    ),
   str = bfg(   Black  , hiCyan   ),
   }

local darkFg = hiWhite
local darkColors = {
   txt = bfg(   Black  ,   White ),
   txt = bfg(   Black  , hiGreen ),
   txt = bfg(   Black  , intifwin( Green ) ),
   txt = bfg(   Black  , darkFg ),
   cxy = bfg(   Blue   , hiYellow ),
   cxy = bfg(   Green  , darkFg  ),
   cxy = bfg(   Yellow , darkFg  ),
   cxy = bfg(   Purple , darkFg  ),
   cxy = bfg(   Cyan   , darkFg  ),
   cxy = bfg(   Blue   , darkFg  ),
   cpp = bfg(   Red    , darkFg  ),
   hil = bfg(   Blue   , darkFg  ),
   hil = bfg(   Cyan   , darkFg  ),
   sel = bfg(   Green  , darkFg  ),
   wuc = bfg(   Cyan   , Black   ),
   wuc = bfg(   Cyan   , White   ),
   com = bfg(   Black  , Green   ),
   com = bfg(   Black  , White   ),
   com = bfg(   Black  , hiPink  ),
   com = bfg(   Black  , Yellow  ),
   com = bfg(   Purple , White   ),
   com = bfg(   Purple , hiWhite ),
   str = bfg(   Gray   , Black   ),
   str = bfg(   Black  , Red     ),
   str = bfg(   Black  , hiCyan  ),
   str = bfg(   Black  , hiRed   ),
   }

--------------------------------------------------

local text_settings  = { colors = darkColors }
local tex_settings   = { colors = darkColors, eolCommentDelim = "%" }
local krsrc_settings = { colors = darkColors, eolCommentDelim = "#" }
local sprintascii_settings = { colors = darkColors, eolCommentDelim = ";;" }  -- hack: eolCommentDelim is valid only at start of line
local diff_settings  = { colors = stdColors, hilite = "diff" }

local bat_settings   = { colors = stdColors, eolCommentDelim = "rem " }
local clang_settings = { colors = darkColors, hilite = "c"  }
local expect_settings  = { colors = DeepCopy(darkColors), hilite = "python" }
local lua_settings   = { colors = DeepCopy(darkColors), hilite = "lua" }
    -- lua_settings.colors.com = bfg( Blue, hiPink )

local python_settings  = { colors = stdColors, hilite = "python" }
local perl_settings  = { colors = darkColors, hilite = "python" }
local make_settings  = { colors = darkColors, hilite = "make" }
local cmake_settings = { colors = darkColors, hilite = "bash" }
local ushell_settings= { colors = darkColors, hilite = "bash" }
local sql_settings   = { colors = darkColors, hilite = "sql" }
local pwrshell_settings= { colors = darkColors, hilite = "pwrshell" }

ftype_map = {  -- ref'd from C, key source: .krsrc ftype: setting
   clang        = clang_settings                       ,
   awk          = clang_settings                       ,
   msbatch      = bat_settings                         ,
   lua          = lua_settings                         ,
   expect       = expect_settings                      ,
   perl         = perl_settings                        ,
   julia        = perl_settings                        ,
   python       = perl_settings                        ,
   make         = make_settings                        ,
   cmake        = cmake_settings                       ,
   kdb          = text_settings                        ,
   krsrc        = krsrc_settings                       ,
   gitedit      = krsrc_settings                       ,
   text         = text_settings                        ,
   sh           = ushell_settings                      ,
   bash         = ushell_settings                      ,
   sql          = sql_settings                         ,
   pwrshell     = pwrshell_settings                    ,
   pseudo       = text_settings                        ,
   unknown      = text_settings                        ,
   wildcard     = ushell_settings                      ,
   diff         = diff_settings                        ,
   sprintascii  = sprintascii_settings                 ,
   tex          = tex_settings                         ,
   [""]         = { colors = darkColors }              ,
   }

print( ftype_map.clang and "ftype_map.clang DEFINED" or "ftype_map.clang UNdefined" )

print( "###############################  k.filesettings execution complete  ##########################" )
